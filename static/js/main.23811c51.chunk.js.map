{"version":3,"sources":["assets/img/answer.png","assets/img/fiftyFifty.PNG","assets/img/hints.PNG","assets/img/options.PNG","components/Home.js","components/register.js","components/Form/validation.js","components/Form/DynamicForm.jsx","components/Form/login.js","components/quiz/QuizInstructions.js","utils/is-empty.js","components/quiz/Play.js","components/quiz/QuizSummary.js","App.js","index.js","assets/sound/correct-answer.mp3","assets/sound/wrong-answer.mp3","assets/sound/button-sound.mp3"],"names":["module","exports","Home","Fragment","Helmet","id","style","textAlign","className","to","MyForm","props","mySubmitHandler","event","preventDefault","age","state","Number","alert","myChangeHandler","nam","target","name","val","value","setState","username","onSubmit","this","type","onChange","React","Component","alpha","validation","Yup","shape","firstName","matches","message","excludeEmptyString","required","max","lastName","address","city","occupation","test","terms","DynamicForm","input","key","label","render","prop","field","checked","form","errors","touched","hasError","defaultOption","options","data","map","i","selectOptions","inputs","renderSelect","initialValues","forEach","getInitialValues","fields","values","console","log","validationSchema","Object","keys","length","handleSubmit","renderFields","App1","QuizInstructions","isEmpty","undefined","trim","Play","displayQuestions","questions","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","answer","numberOfQuestions","previousRandomNumbers","showOptions","handleDisableButton","handleOptionClick","innerHTML","toLowerCase","setTimeout","correctSound","current","play","correctAnswer","wrongSound","wrongAnswer","handleNextButtonClick","playButtonSound","prevState","question","handlePreviousButtonClick","handleQuitButtonClick","window","confirm","history","push","handleButtonClick","buttonSound","M","toast","html","classes","displayLength","score","correctAnswers","numberOfAnsweredQuestions","endGame","navigator","vibrate","wrongAnswers","Array","from","document","querySelectorAll","option","visibility","usedFiftyFifty","previousButtonDisabled","nextButtonDisabled","playerStats","fiftyFiftyUsed","fiftyFifty","hintsUsed","hints","createRef","clearInterval","interval","ref","src","correctNotification","wrongNotification","buttonNotification","float","onClick","optionA","optionB","optionC","optionD","classnames","QuizSummary","location","stats","remark","userScore","toFixed","App","path","exact","component","login","register","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.23811c51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/answer.f05e37d5.png\";","module.exports = __webpack_public_path__ + \"static/media/fiftyFifty.f06f3bfe.PNG\";","module.exports = __webpack_public_path__ + \"static/media/hints.145bf217.PNG\";","module.exports = __webpack_public_path__ + \"static/media/options.0ab14d14.PNG\";","import React from 'react';\nimport { Helmet } from 'react-helmet'\nimport { Link } from 'react-router-dom'\n//import register from './login';\n//import login from './Form/login';\nconst Home = () => (\n    <React.Fragment>\n        <Helmet>\n            <title>ReactTest - App</title>\n        </Helmet>\n        <div id=\"home-wrap\">\n            <section>\n                <div style={{ textAlign: 'center' }}>\n                    <span className=\"mdi mdi-cube-outline cube 48px\"></span>\n                </div>\n                <h1>Quiz App</h1>\n                <div className=\"play-button-container\">\n                    <ul>\n                        <li>\n                            <Link className=\"play-button\" to=\"/play/instructions\">Play</Link>\n                        </li>\n                    </ul>\n                </div>\n                 <div className=\"auth-container\">\n                    <Link className=\"auth-buttons\" id=\"login-button\" to=\"/login\">Add MCQ</Link>\n                     <Link className=\"auth-buttons\" id=\"register-button\" to=\"/register\">Add Simple Question</Link> \n                </div> \n            </section>\n        </div>\n    </React.Fragment>\n    \n);\n\nexport default Home;\n","import React from 'react';\r\n\r\nclass MyForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      age: null,\r\n    };\r\n  }\r\n  mySubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    let age = this.state.age;\r\n    if (!Number(age)) {\r\n      alert(\"Your age must be a number\");\r\n    }\r\n  }\r\n  myChangeHandler = (event) => {\r\n    let nam = event.target.name;\r\n    let val = event.target.value;\r\n    this.setState({[nam]: val});\r\n  }\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.mySubmitHandler}>\r\n      {/* <h1>Hello {this.state.username} {this.state.age}</h1> */}\r\n      <p>Enter your Question:</p>\r\n      <input\r\n        type='text'\r\n        name='username'\r\n        onChange={this.myChangeHandler}\r\n      />\r\n      <p>Enter your Answer:</p>\r\n      <input\r\n        type='text'\r\n        name='age'\r\n        onChange={this.myChangeHandler}\r\n      />\r\n      <br/>\r\n      <br/>\r\n      <input type='submit' />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyForm;","import * as Yup from 'yup';\r\n\r\nconst alpha = /^[a-zA-Z_]+( [a-zA-Z_]+)*$/;\r\n\r\nconst validation = Yup.object().shape({\r\n  firstName: Yup.string()\r\n    .matches(alpha, {message: \"Enter Valid Name\", excludeEmptyString: true })\r\n    .required()\r\n    .max(35),\r\n  lastName: Yup.string()\r\n    .matches(alpha, {message: \"Enter Valid Name\", excludeEmptyString: true })\r\n    .required()\r\n    .max(35),\r\n  address: Yup.string()\r\n    .required(),\r\n  city: Yup.string()\r\n    .matches(alpha, {message: \"Enter Valid city\", excludeEmptyString: true })\r\n    .required(),\r\n  occupation: Yup.string()\r\n    .test('county', 'cannot be empty', value => value !== 'Please Select')\r\n    .required('required'),\r\n  message: Yup.string()\r\n    .required('required'),\r\n  terms: Yup.string()\r\n    .test('terms', 'you must agree to terms', value => value !== false)\r\n    .required('required'),\r\n});\r\n\r\nexport default validation;","import React, { Component, Fragment } from 'react';\r\nimport { Formik, Field } from 'formik';\r\nimport './App.css';\r\n\r\nclass DynamicForm extends Component {\r\n  renderCheckBox(input) {\r\n    return (\r\n      <Fragment key={input.name}>\r\n        <label>{input.label}</label>\r\n        <Field\r\n          name={input.name}\r\n          render={(prop) => {\r\n            const { field } = prop;\r\n            return (\r\n              <input\r\n                name={input.name}\r\n                type=\"checkbox\"\r\n                checked={field.value}\r\n                onChange={field.onChange} />\r\n            );\r\n          }}\r\n        />\r\n      </Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  renderTextArea(input) {\r\n    return (\r\n      <Fragment key={input.name}>\r\n        <label>{input.label}</label>\r\n        <div>\r\n          <Field\r\n            name={input.name}\r\n            render={(props) => {\r\n              const { field } = props;\r\n              const { errors, touched } = props.form;\r\n              const hasError = errors[input.name] && touched[input.name] ? 'hasError' : '';\r\n              return (\r\n                <div>\r\n                  <textarea {...field} id={hasError}>\r\n                  </textarea>\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  renderSelect(input) {\r\n    return (\r\n      <Fragment key={input.name}>\r\n        <label>{input.label}</label>\r\n        <div>\r\n          <Field\r\n            name={input.name}\r\n            render={(props) => {\r\n              const { field } = props;\r\n              const { errors, touched } = props.form;\r\n              const hasError = errors[input.name] && touched[input.name] ? 'hasError' : '';\r\n              const defaultOption = <option key='default' value='Please Select'>Please Select</option>;\r\n              const options = input.data.map(i => <option key={i} value={i}> {i} </option> );\r\n              const selectOptions = [defaultOption, ...options];\r\n              return (\r\n                <div className='dropdown'>\r\n                  <select value={field.value} {...field} id={hasError}>\r\n                    {\r\n                      selectOptions\r\n                    }\r\n                  </select>\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n  renderFields(inputs) {\r\n    return inputs.map(input => {\r\n      if(input.type === 'select') {\r\n        return this.renderSelect(input);\r\n      }\r\n      return (\r\n        <div key={input.name}>\r\n          <label>{input.label}</label>\r\n          <div>\r\n            <Field\r\n              name={input.name}\r\n              render={(props) => {\r\n                const { field } = props;\r\n                const { errors, touched } = props.form;\r\n                const hasError = errors[input.name] && touched[input.name] ? 'hasError' : '';\r\n                return (\r\n                  <input\r\n                    {...field}\r\n                    id={hasError}\r\n                    type='text'\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    })\r\n  }\r\n  getInitialValues(inputs) {\r\n    //declare an empty initialValues object\r\n    const initialValues = {};\r\n    //loop loop over fields array\r\n    //if prop does not exit in the initialValues object,\r\n    // pluck off the name and value props and add it to the initialValues object;\r\n    inputs.forEach(field => {\r\n      if(!initialValues[field.name]) {\r\n        initialValues[field.name] = field.value;\r\n      }\r\n    });\r\n    //return initialValues object\r\n    return initialValues;\r\n  }\r\n  render() {\r\n    const initialValues = this.getInitialValues(this.props.fields);\r\n    return (\r\n      <div className=\"app\">\r\n        <h1>Dynamic Form</h1>\r\n        <Formik\r\n          onSubmit={(values) => {console.log(values)}}\r\n          validationSchema={this.props.validation}\r\n          initialValues={initialValues}\r\n          render={(form) => {\r\n            const errorMessageShow = Object.keys(form.errors).length > 0 ? 'error' : 'hidden';\r\n            return <div>\r\n              <form onSubmit={form.handleSubmit}>\r\n                {this.renderFields(this.props.fields)}\r\n                <button type='submit' className='btn'>Submit</button>\r\n              </form>\r\n            </div>\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DynamicForm;","import React, { Component } from 'react';\r\nimport validation from './validation';\r\nimport DynamicForm from './DynamicForm';\r\n\r\nclass App1 extends Component {\r\n  render() {\r\n    const fields = [\r\n      {label: 'Question : ', type: 'input', name: 'firstName', value: 'Abdi'},\r\n    \r\n      {label: 'Options', type: 'select', data: ['Teacher', 'Software Engineer', 'Doctor', 'Lawyer'], name: 'occupation', value: 'Please Select'},\r\n      \r\n      \r\n    ];\r\n    return (\r\n      <DynamicForm fields={fields} validation={validation} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App1;\r\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport answer from '../../assets/img/answer.png';\nimport fiftyFifty from '../../assets/img/fiftyFifty.PNG';\nimport hints from '../../assets/img/hints.PNG';\nimport options from '../../assets/img/options.PNG';\n\nconst QuizInstructions = () => (\n    <Fragment>\n        <Helmet>\n            <title>Quiz Instructions - Quiz App</title>\n        </Helmet>\n        {/* <div className=\"instructions-wrap container\">\n            <h1>How to play the game?</h1>\n            <p>Ensure you read this guide from start to finish.</p>\n            <ul id=\"main-list\" className=\"browser-default\">\n                <li>The game has a duration of 15 minutes and ends as soon as your time elapses.</li>\n                <li>Each game consist of 15 questions.</li>\n                <li>\n                    Every question contains 4 options\n                    <img src={options} alt=\"Quiz App - Options example\" />\n                </li>\n                <li>\n                    Select the option which best answers provided question by clicking (or selecting) it.\n                    <img src={answer} alt=\"Quiz App - Answer example\" />\n                </li>\n                <li>\n                    Each game has 2 lifelines namely:\n                    <ul id=\"sublist\">\n                        <li>50/50 chances</li>\n                        <li>5 Hints</li>\n                    </ul>\n                </li>\n                <li>\n                    Selecting a 50/50 lifeline by clicking the \n                    \" <span className=\"mdi mdi-set-center mdi-24px lifeline-icon\"></span> \" \n                    icon will remove 2 wrong answers,\n                    leaving one wrong and a correct one. <br />\n                        <img src={fiftyFifty} alt=\"Quiz App - 50/50 example\" />\n                </li>\n                <li>\n                    Using a hint by clicking the\n                    \" <span className=\"mdi mdi-lightbulb-on mdi-24px lifeline-icon\"></span> \"\n                    icon will remove one wrong answer,\n                    leaving two wrong answers and a correct one.\n                    You can use as many hints as possible on a single question.<br />\n                    <img src={hints} alt=\"Quiz App - Hints example\" />\n                </li>\n                <li>\n                    Feel free to quit (or forfeit) from the game at any time. In that case your score\n                    will be revealed afterwards.\n                </li>\n                <li>\n                    The timer starts as soon as the game loads.\n                </li>\n                <li>\n                    Let's do this if you think you've got what it takes?\n                </li>\n            </ul> */}\n            <div>\n                <span className=\"left\">\n                    <Link to=\"/\">No, take me back!</Link>\n                </span>\n                <span className=\"left\">\n                    <Link to=\"/play/quiz\">Okay, let's do this!</Link>\n                </span>\n            </div>\n        {/* </div> */}\n    </Fragment>\n);\n\nexport default QuizInstructions;","const isEmpty = (value) => value === undefined || \n                         value === null ||\n                         (typeof value === 'object' && Object.keys(value).length === 0) ||\n                         (typeof value === 'string' && value.trim().length === 0)\n\nexport default isEmpty;","import React, { Component, Fragment } from 'react'\nimport Helmet from 'react-helmet';\nimport M from 'materialize-css';\nimport classnames from 'classnames';\n\nimport questions from '../../questions.json';\nimport isEmpty from '../../utils/is-empty';\nimport correctNotification from '../../assets/sound/correct-answer.mp3';\nimport wrongNotification from '../../assets/sound/wrong-answer.mp3';\nimport buttonNotification from '../../assets/sound/button-sound.mp3';\n\nexport class Play extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            questions,\n            currentQuestion: {},\n            nextQuestion: {},\n            previousQuestion: {},\n            answer: '',\n            numberOfQuestions: 0,\n            numberOfAnsweredQuestions: 0,\n            currentQuestionIndex: 0,\n            score: 0,\n            correctAnswers: 0,\n            wrongAnswers: 0,\n            //hints: 5,\n            //fiftyFifty: 2,\n            usedFiftyFifty: false,\n            nextButtonDisabled: false,\n            previousButtonDisabled: true,\n            previousRandomNumbers: [],\n           // time: {}\n        };\n        //this.interval = null;\n        this.correctSound = React.createRef();\n        this.wrongSound = React.createRef();\n        this.buttonSound = React.createRef();\n    };\n\n    componentDidMount() {\n        const { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\n        this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\n        //this.startTimer();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    displayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\n        let { currentQuestionIndex } = this.state;\n        if(!isEmpty(this.state.questions)) {\n            questions = this.state.questions;\n            currentQuestion = questions[currentQuestionIndex];\n            nextQuestion = questions[currentQuestionIndex + 1];\n            previousQuestion = questions[currentQuestionIndex - 1];\n            const answer = currentQuestion.answer;\n            this.setState({\n                currentQuestion: currentQuestion,\n                nextQuestion,\n                previousQuestion,\n                numberOfQuestions: questions.length,\n                answer,\n                previousRandomNumbers: []\n             }, () => {\n                 this.showOptions();\n                 this.handleDisableButton();\n             });\n        }\n    };\n\n    handleOptionClick = (event) => {\n        if(event.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n            setTimeout(() => {\n                this.correctSound.current.play();\n            }, 500);\n            this.correctAnswer();\n        }\n        else {\n            setTimeout(() => {\n                this.wrongSound.current.play();\n            }, 500)\n            this.wrongAnswer();\n        }\n    };\n\n    handleNextButtonClick = () => {\n        this.playButtonSound();\n        if(this.state.nextQuestion !== undefined) {\n            this.setState(prevState => ({\n                currentQuestionIndex: prevState.currentQuestionIndex + 1 \n            }), () => {\n                this.displayQuestions(this.state.question, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n            });\n        }\n    };\n\n    handlePreviousButtonClick = () => {\n        this.playButtonSound();\n        if(this.state.previousQuestion !== undefined) {\n            this.setState(prevState => ({\n                currentQuestionIndex: prevState.currentQuestionIndex - 1 \n            }), () => {\n                this.displayQuestions(this.state.question, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n            });\n        }\n    };\n\n    handleQuitButtonClick = () => {\n        this.playButtonSound();\n        if(window.confirm('Are you sure you want to quit game?')) {\n            this.props.history.push('/');\n        }\n    }\n\n    handleButtonClick = (event) => {\n        switch(event.target.id) {\n            \n            case 'next-button':\n                  this.handleNextButtonClick();\n                  break;\n\n            case 'previous-button':\n                  this.handlePreviousButtonClick();\n                  break;\n\n            case 'quit-button':\n                  this.handleQuitButtonClick();\n                  break;\n\n            default:\n                break;\n        }\n    }\n\n    playButtonSound = () => {\n        this.buttonSound.current.play();\n    }\n\n    correctAnswer = () => {\n        M.toast({ \n            html: 'Correct Answer',\n            classes: 'toast-valid',\n            displayLength: 1500\n        });\n        this.setState(prevState => ({\n            score: prevState.score + 1,\n            correctAnswers: prevState.correctAnswers + 1,\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n        }), () => {\n            if(this.state.nextQuestion === undefined) {\n                this.endGame();\n            }\n            else {\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n            }\n        });\n    };\n\n    wrongAnswer = () => {\n        navigator.vibrate(1000);\n        M.toast({\n            html: 'Wrong Answer',\n            classes: 'toast-invalid',\n            displayLength: 1500\n        });\n        this.setState(prevState => ({\n            wrongAnswers: prevState.wrongAnswer + 1,\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n        }), () => {\n            if(this.state.nextQuestion === undefined) {\n                this.endGame();\n            } \n            else {\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n            }\n        });\n    };\n\n    showOptions = () => {\n        const options = Array.from(document.querySelectorAll('.option'));\n\n        options.forEach((option) => {\n            option.style.visibility = 'visible';\n        });\n\n        this.setState({\n            usedFiftyFifty: false\n        });\n\n    }\n\n    // // handleHints = () => {\n    // //     if(this.state.hints > 0) {\n    // //         const options = Array.from(document.querySelectorAll('.option'));\n    // //         let indexOfAnswer;\n    \n    // //         options.forEach((option, index) => {\n    // //             if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n    // //                 indexOfAnswer = index;\n    // //             }\n    // //         });\n    // //         while(true) {\n    // //             const randomNumber = Math.round(Math.random() * 3);\n    // //             if(randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\n    // //                 options.forEach((option, index) => {\n    // //                     if(index === randomNumber) {\n    // //                         option.style.visibility = 'hidden';\n    // //                         this.setState((prevState) => ({\n    // //                             hints: prevState.hints - 1,\n    // //                             previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\n    // //                         }));\n    // //                     }\n    // //                 });\n    // //                 break;\n    // //             }\n    // //             if(this.state.previousRandomNumbers.length >= 3) break;\n    // //         }\n    // //     }\n    //     else if(this.state.hints === 0) {\n    //         M.toast({\n    //             html: \"You don't have any hints left.\",\n    //             classes: 'toast-hint',\n    //             displayLength: 1500\n    //         });\n    //     }\n    // };\n\n    // handleFiftyFifty = () => {\n    //     if(this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\n    //         const options = document.querySelectorAll('.option');\n    //         const randomNumbers = [];\n    //         let indexOfAnswer;\n\n    //         options.forEach((option, index) => {\n    //             if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n    //                 indexOfAnswer = index;\n    //             }\n    //         });\n    //         let count = 0;\n    //         do {\n    //             const randomNumber = Math.round(Math.random() * 3);\n    //             if(randomNumber !== indexOfAnswer) {\n    //                 if(randomNumbers.length < 2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\n    //                     randomNumbers.push(randomNumber);\n    //                     count ++;\n    //                 }\n    //                 else {\n    //                     while(true) {\n    //                         const newRandomNumber = Math.round(Math.random() * 3);\n    //                         if(!randomNumbers.includes(newRandomNumber) && !randomNumbers.includes(indexOfAnswer)) {\n    //                             randomNumbers.push(newRandomNumber);\n    //                             count++;\n    //                             break;\n    //                         }\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //         while(count < 2);\n    //         options.forEach((option, index) => {\n    //             if(randomNumbers.includes(index)) {\n    //                 option.style.visibility = 'hidden';\n    //             }\n    //         });\n    //         this.setState(prevState => ({\n    //             fiftyFifty: prevState.fiftyFifty - 1,\n    //             usedFiftyFifty: true\n    //         }));\n    //     }\n    //     else if(this.state.fiftyFifty === 0) {\n    //         M.toast({\n    //             html: \"You don't have more 50/50s left.\",\n    //             classes: 'fiftyFifty-toast',\n    //             displayLength: 1500\n    //         });\n    //     }\n    // };\n\n    // startTimer = () => {\n    //     const countdownTime = Date.now() + 180000;\n    //     this.interval = setInterval(() => {\n    //         const now = new Date();\n    //         const distance = countdownTime - now;\n    //         const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    //         const seconds = Math.floor((distance % (1000 * 60)) / (1000));\n    //         if(distance < 0) {\n    //             clearInterval(this.interval);\n    //             this.setState({\n    //                 time: {\n    //                     minutes: 0,\n    //                     seconds: 0\n    //                 }\n    //             }, () => {\n    //                 this.endGame();\n    //             });\n    //         }\n    //         else {\n    //             this.setState({\n    //                 time: {\n    //                     minutes,\n    //                     seconds\n    //                 }\n    //             });\n    //         }\n    //     }, 1000);\n    // };\n\n    handleDisableButton = () => {\n        if(this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\n            this.setState({\n                previousButtonDisabled: true\n            });\n        }\n        else {\n            this.setState({\n                previousButtonDisabled: false\n            });\n        }\n\n        if(this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\n            this.setState({\n                nextButtonDisabled: true\n            });\n        }\n        else {\n            this.setState({\n                nextButtonDisabled: false\n            });\n        }\n    };\n\n    endGame = () => {\n        alert(\"Game has ended.\");\n        const { state } = this;\n        const playerStats = {\n            score: state.score,\n            numberOfQuestions: state.numberOfQuestions,\n            numberOfAnsweredQuestions: state.correctAnswers + state.wrongAnswers,\n            correctAnswers: state.correctAnswers,\n            wrongAnswers: state.wrongAnswers,\n            fiftyFiftyUsed: 2 - state.fiftyFifty,\n            hintsUsed: 5- state.hints\n        };\n        console.log(playerStats);\n        setTimeout(() => {\n            this.props.history.push('/play/QuizSummary', playerStats);\n        }, 1000);\n    };\n\n    render() {\n\n        const { \n            currentQuestion, \n            currentQuestionIndex, \n            numberOfQuestions, \n            //hints, \n            //fiftyFifty, \n            //time \n        } = this.state;\n\n        return (\n            <div>\n                <Fragment>\n                    <Helmet>\n                        <title>\n                            Play - Quiz App\n                        </title>\n                    </Helmet>\n                    <Fragment>\n                        <audio ref={this.correctSound} src={correctNotification}></audio>\n                        <audio ref={this.wrongSound} src={wrongNotification}></audio>\n                        <audio ref={this.buttonSound} src={buttonNotification}></audio>\n                    </Fragment>\n                    <div className=\"questions\">\n                        <h2>Quiz Mode</h2>\n                        <div className=\"lifeline-container\">\n                            <p>\n                                {/* <span onClick={this.handleFiftyFifty} className=\"mdi mdi-set-center mdi-24px lifeline-icon\">\n                                    <span className=\"lifeline\">{fiftyFifty}</span>\n                                </span> */}\n                            </p>\n                            <p>\n                                {/* <span onClick={this.handleHints} className=\"mdi mdi-lightbulb-on-outline mdi-24px lifeline-icon\">\n                                    <span className=\"lifeline\">{hints}</span>\n                                </span> */}\n                            </p>\n                        </div>\n                        <div className=\"timer-container\">\n                            <p>\n                                <span className=\"left\" style={{ float: 'left' }}>{currentQuestionIndex + 1} of {numberOfQuestions}</span>\n                                {/* <span className=\"right\">{time.minutes}:{time.seconds}<span className=\"mdi mdi-clock-outline mdi-24px lifeline-icon\"></span></span> */}\n                            </p>\n                        </div>\n                        <h5>{currentQuestion.question}</h5>\n                        <div className=\"options-container\">\n                            <p onClick={this.handleOptionClick}  className=\"option\">{currentQuestion.optionA}</p>\n                            <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\n                        </div>\n                        <div className=\"options-container\">\n                            <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\n                            <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\n                        </div>\n                        <div className=\"button-container\">\n                            <button\n                                className={classnames('', {'disabled': this.state.previousButtonDisabled})} \n                                id=\"previous-button\" \n                                onClick={this.handleButtonClick}>\n                                    Previous\n                            </button>\n                            <button\n                                className={classnames('', {'disabled': this.state.nextButtonDisabled})} \n                                id=\"next-button\" \n                                onClick={this.handleButtonClick}>\n                                    Next\n                            </button>\n                            <button \n                                id=\"quit-button\" \n                                onClick={this.handleButtonClick}>\n                                    Quit\n                            </button>\n                        </div>\n                    </div>\n                </Fragment>\n            </div>\n        )\n    }\n}\n\nexport default Play\n","import React, { Component, Fragment } from 'react'\nimport Helmet from 'react-helmet';\nimport { Link } from 'react-router-dom';\n\nexport class QuizSummary extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            numberOfQuestions: 0,\n            numberOfAnsweredQuestions: 0,\n            correctAnswers: 0,\n            wrongAnswers: 0,\n            hintsUsed: 0,\n            fiftyFiftyUsed: 0\n        };\n    }\n\n    componentDidMount() {\n        const { state } = this.props.location;\n        if(state) {\n            this.setState({\n                score: (state.score / state.numberOfQuestions) * 100,\n                numberOfQuestions: state.numberOfQuestions,\n                numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\n                correctAnswers: state.correctAnswers,\n                wrongAnswers: state.wrongAnswers,\n                hintsUsed: state.hintsUsed,\n                fiftyFiftyUsed: state.fiftyFiftyUsed\n            });\n        } \n    };\n\n    render() {\n        \n        const { state, score } = this.props.location;\n        let stats, remark;\n        const userScore = this.state.score;\n        \n        if(userScore <= 30) {\n            remark = \"You need more practice.\";\n        }\n        else if(userScore > 30 && userScore <= 50) {\n            remark = \"Better luck next time.\";   \n        }\n        else if(userScore <= 70 && userScore > 50) {\n            remark = \"You can do better.\";\n        }\n        else if(userScore <= 71 && userScore <= 84) {\n            remark = \"You did great.\";\n        }\n        else {\n            remark = \"You are an absolute genius.\";\n        }\n\n        if(state !== undefined) {\n            stats = (\n                <Fragment>\n                    <div >\n                        <span className=\"mdi mdi-check-circle-outline primary-icon\"></span>\n                    </div>\n                    <h1>Quiz has ended!</h1>\n                    <div className=\"container\">\n\n                        <h4>{remark}</h4>\n                        <h2>Your Score: {this.state.score.toFixed(0)}&#37;</h2>\n                        <span className=\"stat left\">Total number of questions: </span>\n                        <span className=\"right\">{this.state.numberOfQuestions}</span><br/>\n\n                        <span className=\"stat left\">Total number of attempted questions: </span>\n                        <span className=\"right\">{this.state.numberOfAnsweredQuestions}</span><br/>\n\n                        <span className=\"stat left\">Total number of correct answers: </span>\n                        <span className=\"right\">{this.state.correctAnswers}</span><br/>\n\n                        <span className=\"stat left\">Total number of wrong answers: </span>\n                        <span className=\"right\">{this.state.wrongAnswers}</span><br/>\n\n                        <span className=\"stat left\">Total number of used hints: </span>\n                        <span className=\"right\">{this.state.hintsUsed}</span><br/>\n\n                        <span className=\"stat left\">Total number of 50/50 used: </span>\n                        <span className=\"right\">{this.state.fiftyFiftyUsed}</span><br/>\n\n                    </div>\n                    <section className=\"links\">\n                        <ul>\n                            <li>\n                                <Link to=\"/\" className=\"button-link-bth\">Back to home?</Link>\n                                <Link to=\"/play/Quiz\" className=\"button-link-pa\">Play again?</Link>\n                            </li>\n                        </ul>\n                    </section>\n                </Fragment>\n            );\n        }\n        else {\n            stats = (\n                <section>\n                    <h1 className=\"no-stats\">No Statistics Available</h1>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Back to home?</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/play/quiz\">Start Game?</Link>\n                        </li>\n                    </ul>\n                </section>\n            );\n        }\n\n        return (\n            <Fragment>\n                <Helmet><title>Quiz Summary - Quiz App</title></Helmet>\n                {stats}\n            </Fragment>\n        )\n    }\n}\n\nexport default QuizSummary\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport register from './components/register';\nimport login from './components/Form/login';\nimport QuizInstructions from './components/quiz/QuizInstructions';\nimport Play from './components/quiz/Play';\nimport QuizSummary from './components/quiz/QuizSummary';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Home}/>\n      <Route path=\"/play/instructions\" exact component={QuizInstructions} /> \n      <Route path=\"/login\" exact component={login} />\n      <Route path=\"/register\" exact component={register} />\n      <Route path=\"/play/Quiz\" exact component={Play} />\n      <Route path=\"/play/QuizSummary\" exact component={QuizSummary} />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/@mdi/font/css/materialdesignicons.min.css';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\nimport './styles/styles.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/correct-answer.ee6aadae.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong-answer.c7106542.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button-sound.32194199.mp3\";"],"sourceRoot":""}